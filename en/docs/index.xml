<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overpass API Documentation on LearnOverpass</title>
    <link>//osmlab.github.io/learnoverpass/en/docs/</link>
    <description>Recent content in Overpass API Documentation on LearnOverpass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 May 2015 11:09:35 +0000</lastBuildDate>
    
	<atom:link href="//osmlab.github.io/learnoverpass/en/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Union</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/block-queries/union/</link>
      <pubDate>Thu, 07 May 2015 11:09:35 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/block-queries/union/</guid>
      <description>The union block statement is written as a pair of parentheses. Inside the union, any sequence of statements can be placed, including nested union and foreach statements.
(statement_1; statement_2; â€¦)[-&amp;gt;.result_set];  It takes no input set. It produces a result set. Its result set is the union of the result sets of all sub-statements, regardless of whether a sub-statement has a redirected result set or not.
Example:
(node[name=&amp;quot;Foo&amp;quot;];way[name=&amp;quot;Foo&amp;quot;];);  This collects in the first statement all nodes that have a name tag &amp;ldquo;Foo&amp;rdquo; and in the second statement all ways that have a name tag &amp;ldquo;Foo&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Difference</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/block-queries/difference/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/block-queries/difference/</guid>
      <description>The difference block statement is written as a pair of parentheses. Inside the difference statement, exactly two statements must be placed, and between them a minus sign.
(statement_1; - statement_2;)[-&amp;gt;.result_set];  It takes no input set. It produces a result set. Its result set contains all elements that are result of the first sub-statement and not contained in the result of the second sub-statement.
Example:
(node[name=&amp;quot;Foo&amp;quot;]; - node(50.0,7.0,51.0,8.0););  This collects all nodes that have a name tag &amp;ldquo;Foo&amp;rdquo; but are not inside the given bounding box.</description>
    </item>
    
    <item>
      <title>For-each loop (foreach)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/block-queries/foreach/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/block-queries/foreach/</guid>
      <description>The foreach block statement is written as the keyword foreach, followed by a pair of parentheses. Inside these parentheses, any sequence of statements can be placed, including nested union and foreach statements.
It takes an input set. It produces no result set. The foreach statement loops over the content of the input set, once for every element in the input set.
Example:
way[name=&amp;quot;Foo&amp;quot;]; foreach( ( ._; &amp;gt;; ); out; );  For each way that has a name tag with value &amp;ldquo;Foo&amp;rdquo;, this prints the nodes that belong to this way immediately followed by the way itself.</description>
    </item>
    
    <item>
      <title>Area pivot (pivot)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/pivot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/pivot/</guid>
      <description>The pivot filter selects the element of the chosen type that defines the outline of the given area.
The input set can be changed with an adapted prefix notation. As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of an opening parenthesis. Then follows the keyword pivot. The filter ends with a closing parenthesis.
The statement finds for each area in the input set the respective element that the area has been generated from.</description>
    </item>
    
    <item>
      <title>Bounding Box</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/bbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/bbox/</guid>
      <description>The bbox-query filter selects all elements within a certain bounding box.
It has no input set. As for all filters, the result set is specified by the whole statement, not the individual filter.
(south,west,north,east)  It consists of an opening parenthesis. Then follow four floating point numbers, separated by commas. The filter ends with a closing parenthesis.
The floating point numbers give the limits of the bounding box: The first is the southern limit or minimum latitude.</description>
    </item>
    
    <item>
      <title>By Element Id</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/element-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/element-id/</guid>
      <description>The id-query filter selects the element of given type with given id. It supports beside the OSM datatypes node, way, and relation also the type area.
It has no input set. As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of an opening parenthesis. Then follows a positive integer. The filter is ends with a closing parenthesis.
Examples:
node(1); way(1); rel(1); area(1);  Note that area ids need to be derived from an existing OSM way by adding 2400000000 to its OSM id or in case of a relation by adding 3600000000 respectively.</description>
    </item>
    
    <item>
      <title>By Input Set</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/input-set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/input-set/</guid>
      <description>The &amp;ldquo;item&amp;rdquo; filter selects all elements from its input set.
As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of a dot, followed by the name of the input set.
Examples: The default set
node._;  and a named set
node.a;  It is also possible to specify several input sets:
node.a.b;   // get area Alpe and Cividale (area[name=&amp;#34;Cividale del Friuli&amp;#34;])-&amp;gt;.</description>
    </item>
    
    <item>
      <title>By Tag</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/tag/</guid>
      <description>The has-kv filter selects all elements that have or have not a tag with a certain value. It supports the basic OSM types node, way, and relation as well as the extended type area.
It has no input set. As for all filters, the result set is specified by the whole statement, not the individual filter.
All variants consist of an opening bracket, then a string literal in single or double quotes.</description>
    </item>
    
    <item>
      <title>By area (area)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/area/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/area/</guid>
      <description>The area filter selects all elements of the chosen type that are inside the given area. Please note with regard to attic data that areas always represent current data.
The input set can be changed with an adapted prefix notation. As for all filters, the result set is specified by the whole statement, not the individual filter.
Syntax: It consists of an opening parenthesis. Then follows the keyword area. Then can follow a colon and a non-negative integer.</description>
    </item>
    
    <item>
      <title>By date of change (changed)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/changed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/changed/</guid>
      <description>The changed filter selects all elements that have been changed between the two given dates. If only one date is given, then the second is assumed to be the front date of the database. If only one date is given and it is run with the current timestamp, then it behaves exactly like &amp;ldquo;newer&amp;rdquo; with two exceptions: first, it is faster, second, it can also stand as the only filter.</description>
    </item>
    
    <item>
      <title>By polygon (poly)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/polygon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/polygon/</guid>
      <description>The polygon filter selects all elements of the chosen type inside the given bounding box.
It has no input set. As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of an opening parenthesis. Then follows the keyword poly. Then follows a string containing an even number of floating point numbers, divided only by whitespace. Each pair of floating point numbers represents a coordinate, in order latitude, then longitude.</description>
    </item>
    
    <item>
      <title>By user (user, uid)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/user/</guid>
      <description>The user filter selects all elements that have been last touched by the specified user.
It has no input set. As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of an opening parenthesis. Then follows either the keyword user, a colon and a string literal denoting the user name to search for. Or the keyword uid followed by the user id of the user to search for.</description>
    </item>
    
    <item>
      <title>Item</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/standalone-queries/item/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/standalone-queries/item/</guid>
      <description>The item standalone query consists only of an input set prefix.
It takes the input set specified by its prefix. This is in particular useful for union statements: it reproduces its input set as (part of the) result of the union statement.
The most common usage is the usage with the default input set:
 ._;  In the context of a union statement, the following will return all items in the default inputset along with the recurse down result.</description>
    </item>
    
    <item>
      <title>Newer</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/newer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/newer/</guid>
      <description>The newer filter selects all elements that have been changed since the given date. As opposed to other filters, this filter cannot be used alone. If the underlying database instance supports attic data, then &amp;ldquo;changed&amp;rdquo; is probably a better choice than &amp;ldquo;newer&amp;rdquo;.
It has no input set. As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of an opening parenthesis. Then follows a date specification.</description>
    </item>
    
    <item>
      <title>Print (out)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/actions/print/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/actions/print/</guid>
      <description>The out action can be configured with an arbitrary number of parameters that are appended, separated by whitespace, between the word out and the semicolon.
The out action takes an input set. It doesn&amp;rsquo;t return a result set. The input set can be changed by prepending the variable name.
Allowed values, in any order, are:
 one of the following the degree of verbosity; default is body:
 ids: Print only the ids of the elements.</description>
    </item>
    
    <item>
      <title>Recurse (n, w, r, bn, bw, br)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/recurse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/recurse/</guid>
      <description>The recurse filter selects all elements that are members of an element from the input set or have an element of the input set as member, depending on the given parameter.
The input set can be changed with an adapted prefix notation. As for all filters, the result set is specified by the whole statement, not the individual filter.
It consists of an opening parenthesis. Then follows one of the symbols: w (forward from ways), r (forward from relations), bn (backward from nodes), bw (backward from ways), or br (backward from relations).</description>
    </item>
    
    <item>
      <title>Recurse Up (&lt;)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/standalone-queries/recurse-up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/standalone-queries/recurse-up/</guid>
      <description>The recurse up standalone query is written as a single less than.
It takes an input set. It produces a result set. Its result set are all the ways that have a node appearing in the input set as a member, all relations that have a node or way from the input set as a member, and all relations that have a way from the result set as members.
Example:</description>
    </item>
    
    <item>
      <title>Relative to other elements (around)</title>
      <link>//osmlab.github.io/learnoverpass/en/docs/filters/around/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/docs/filters/around/</guid>
      <description>The around filter selects all elements within a certain radius around the elements in the input set. If you provide coordinates, then these coordinates are used instead of the input set. The input set can be changed with an adapted prefix notation. As for all filters, the result set is specified by the whole statement, not the individual filter.
A radius of 0 can be used for a way intersection test on outer/inner points.</description>
    </item>
    
  </channel>
</rss>