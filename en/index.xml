<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overpass API is a highly optimized, read-only API built for gathering OSM map data. on LearnOverpass</title>
    <link>//osmlab.github.io/learnoverpass/en/</link>
    <description>Recent content in Overpass API is a highly optimized, read-only API built for gathering OSM map data. on LearnOverpass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 May 2015 11:09:35 +0000</lastBuildDate>
    
	<atom:link href="//osmlab.github.io/learnoverpass/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Way Node Recursion</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/15/</link>
      <pubDate>Wed, 15 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/15/</guid>
      <description>“Oh! I see that building!” Bob exclaims. “So the ATM is just on the other side, yes?”
As Bob walked to the building, he realized one important thing - he didn’t know where the entrance is! Looks like we need to write another query for him!
With the existing query, we’ve successfully found the building, but we need to further locate a specific point - the building’s entrance.
A building, since it’s generally a polygon when viewed from the map, is defined as a way.</description>
    </item>
    
    <item>
      <title>Way Closed Polygon</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/14/</link>
      <pubDate>Tue, 14 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/14/</guid>
      <description>“Hmm, I don’t see it from the observatory, but I do see it from the overpass query map.” says Bob. Indeed, the ATM is on the opposite side of a building (the brownish polygon in the map viewer).
Let’s go ahead and query for both ATM and the building, so that Bob can have a better idea as to where the ATM is.</description>
    </item>
    
    <item>
      <title>Around II</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/13/</link>
      <pubDate>Mon, 13 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/13/</guid>
      <description>“Thanks man!” Bob says as we query for the route back again. He follows it to reach the observatory tower. Once he reached the river bank, he decides to leave his bike and swim to the observatory!
After a few minutes, Bob comes back, shivering and wet.
“Brrrr… water’s cold!” Bob exclaims, when, out of nowhere, the waiter from the restaurant, all in white attire, appareas. He actually followed Bob all this way!</description>
    </item>
    
    <item>
      <title>Out Modificator Data</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/12/</link>
      <pubDate>Sun, 12 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/12/</guid>
      <description>“Uaaghhh! What happened to my map!” Bob exclaims as he saw the now empty map view.
So you see, using a bare out statement produced an empty map.
See, our out statement prints out the data that it receives, that is, if it can. A way only carries a reference to the list of nodes that make up for it - try clicking the ‘data’ button on the top right of the map view.</description>
    </item>
    
    <item>
      <title>Out Modificators</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/11/</link>
      <pubDate>Sat, 11 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/11/</guid>
      <description>Incredibly good work!
“Thanks!” Bob said as he hopped on his bike. “I’ll be following this road to the observatory then!&amp;rdquo; The last couple of exercises introduced quite a few things, namely, way and the out geom modificator.
A Way is another OSM element (like node) that describes a linear feature or area. Just accept that a way can also define areas for now. The relevant info that we need to learn is that a way is usually used to define roads, streams and highways, among other things.</description>
    </item>
    
    <item>
      <title>Way By Area</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/10/</link>
      <pubDate>Fri, 10 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/10/</guid>
      <description>“Ahm, Are you sure this is right?” Bob says as he sees the different ways. Uh oh!
We’ve managed to successfully query for ways of the name “Innstraße”, but unfortunately, it seems that there are actually quite a few ways that are named the same!
This is obviously unacceptable - Overpass showed us all the ways named “Innstraße” around the world, but we’re only interested in the “Innstraße” near Bob.</description>
    </item>
    
    <item>
      <title>Way Query</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/9/</link>
      <pubDate>Thu, 09 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/9/</guid>
      <description>Bob carefully examines the bike in the parking space, trying to find his bike. “Aha!&amp;rdquo; exclaims Bob, as he grabs the red bike we can only assume is his.
Now that Bob is on his bike, he now needs to go the observatory to find his wallet. Since we already know Bob has a bad sense of direction (I mean, he did get lost!) it’d be best to show Bob the main road he needs to take to reach the observatory.</description>
    </item>
    
    <item>
      <title>Around By Area</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/8/</link>
      <pubDate>Wed, 08 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/8/</guid>
      <description>“Wooh, At least I know now where the observatory is!” says Bob.
Seeing the distance between them though, Bob is quite flustered. That’s quite a long way!
Luckily, Bob remembers leaving his bicycle in the nearest parking space. Let’s go ahead and query for Bob’s bike!</description>
    </item>
    
    <item>
      <title>By Area</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/7/</link>
      <pubDate>Tue, 07 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/7/</guid>
      <description>“Bingo!” Bob says as he walks towards the restaurant.
See how powerful the Overpass QL is in querying OSM data? It has a plethora of different filters and statements, and combining them with each other can create even more specific queries for your use cases.
Our previous example introduces a very important metaphor in the Overpass Query Language, which is ‘flow’. A good way to think of the Overpass API is that it allows OSM data (nodes, etc.</description>
    </item>
    
    <item>
      <title>Filter by Tag III</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/6/</link>
      <pubDate>Mon, 06 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/6/</guid>
      <description>“Woah, great! I see a lot of nodes around me, but there are too many, and I’m not sure which are the restaurants!&amp;rdquo;
We used the around filter on our previous example to query for nodes around our particular node, and it worked! As you can see on the map viewer, we see the OSM data around our first statement.
However, it’s quite problematic - we haven’t actually found any restaurants, and there are too many nodes!</description>
    </item>
    
    <item>
      <title>Around Filter</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/5/</link>
      <pubDate>Sun, 05 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/5/</guid>
      <description>&amp;ldquo;Woah, it’s empty! Could it be that there are no restaurants near me?” asks Bob.
Not really. See, our first statement node(2190458950) is already a node, so filtering it further wouldn’t do anything! And since we added a new filter (restaurants) to a statement that we know gives us a tree, we basically asked OSM to further filter our result set (a tree node) to only show restaurants, which obviously results in OSM nothing (since a tree is not a restaurant)!</description>
    </item>
    
    <item>
      <title>Filter by Tag III?</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/4/</link>
      <pubDate>Sat, 04 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/4/</guid>
      <description>“Well isn’t that better? Shorter and easier to work with.”
“You know, I’ve been waiting for you for quite a while, I’m hungry! Since my GPS doesn’t really seem to be all that reliable, would you mind looking for a place near me where I can eat?&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Filter By Tag II</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/3/</link>
      <pubDate>Fri, 03 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/3/</guid>
      <description>Awesome! We’ve filtered our data to only show trees!
If you notice on the text editor on the right, [natural=tree] is placed on the 2nd line. Overpass Turbo allows you to add indentation and extra lines as you see fit, so feel free to make ample use of them to make your queries more readable! Note however, that the semicolon is also placed in the second line to tell Overpass that statement is finished.</description>
    </item>
    
    <item>
      <title>Filter By Tag</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/2/</link>
      <pubDate>Thu, 02 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/2/</guid>
      <description>Nice! As you can see the Query Language might look cryptic at first, but it’s actually quite straightforward!
Those circles you see in the map view are &amp;ldquo;points of interest&amp;rdquo; called “nodes”. Try clicking on them - some just contain their own positions (lat/lon) but some of them are tagged and contain other data, such as names, type of node, etc, etc.
Since our friend “Bob” has a pretty inaccurate GPS, he only managed to give us rough coordinates.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>//osmlab.github.io/learnoverpass/en/exercises/intro/1/</link>
      <pubDate>Wed, 01 Jul 2015 16:35:50 +0800</pubDate>
      
      <guid>//osmlab.github.io/learnoverpass/en/exercises/intro/1/</guid>
      <description>Hello and welcome to LearnOverpass!
The Overpass API is a powerful API that lets you query data from OpenStreetMap. You can find different places, routes to locations, and everything under the sun, quite literally! You can ‘talk’ to it and request data for your own specific use, using its own language, the “Overpass Query Language” (QL).
What you see on the right is a text editor where you can type in your QL commands.</description>
    </item>
    
  </channel>
</rss>